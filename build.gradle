buildscript {
    repositories {
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.8'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.matthewprenger.cursegradle'

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = 'ModMaven'
        url = 'modmaven.k-4u.nl'
    }
}

group = 'com.github.wendall911.tinkersurvival'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def mcversion = "${minecraft_version}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: mappings_version

    runs {
        client {
            workingDirectory project.file("run").canonicalPath

            mods {
                tinkersurvival {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
/*
    deobfCompile "slimeknights.mantle:Mantle:${minecraft_short_version}-${mantle_version}"
    deobfCompile "slimeknights:TConstruct:${minecraft_version}-${tic_version}"

    deobfProvided "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

    deobfProvided "com.github.glitchfiend.biomesoplenty:ToughAsNails:${minecraft_version}-${tan_version}:api"
*/
}

def commonManifest = {
    attributes 'FMLAT': 'tinkersurvival_at.cfg'
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${version}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    if (project.hasProperty('tscurseApiKey')) {
    apiKey = project.tscurseApiKey
    project {
        id = project.tscurseId
        changelog = file('build/libs/' + project.getName() + '-' + project.version + '-changelog.txt')
        releaseType = cf_release_type
        addGameVersion(minecraft_version)
        mainArtifact(jar) {
            relations {
                requiredLibrary 'mantle'
                requiredLibrary 'tinkers-construct'
                optionalLibrary 'constructs-armory'
                optionalLibrary 'tinkers-tool-leveling'
                optionalLibrary 'tough-as-nails'
            }
        }
    }
    }
}

tasks.curseforge.dependsOn build

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File('build/libs/' + project.getName() + '-' + version + '-changelog.txt');
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "${mod_version}";
    fromRef = "${last_mod_version}";
}

tasks.build.dependsOn('changelog')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE'
    }

    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    manifest commonManifest
    classifier = 'deobf'
}

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
